import sys
import urllib.parse
import os
import subprocess
import glob
import winreg
from pathlib import Path

def find_phpstorm_executable():
    """T√¨m phpstorm64.exe t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau"""
    
    # 1. Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng PATH
    try:
        result = subprocess.run(['where', 'phpstorm64.exe'], 
                              capture_output=True, text=True, shell=True)
        if result.returncode == 0:
            path = result.stdout.strip().split('\n')[0]
            if os.path.exists(path):
                print(f"T√¨m th·∫•y PhpStorm trong PATH: {path}")
                return path
    except:
        pass
    
    # 2. Ki·ªÉm tra trong Program Files
    program_files_paths = [
        os.environ.get('PROGRAMFILES', r'C:\Program Files'),
        os.environ.get('PROGRAMFILES(X86)', r'C:\Program Files (x86)')
    ]
    
    for program_files in program_files_paths:
        jetbrains_path = os.path.join(program_files, 'JetBrains')
        if os.path.exists(jetbrains_path):
            # T√¨m t·∫•t c·∫£ th∆∞ m·ª•c PhpStorm
            phpstorm_dirs = glob.glob(os.path.join(jetbrains_path, 'PhpStorm*'))
            for phpstorm_dir in sorted(phpstorm_dirs, reverse=True):  # S·∫Øp x·∫øp ƒë·ªÉ l·∫•y phi√™n b·∫£n m·ªõi nh·∫•t
                executable = os.path.join(phpstorm_dir, 'bin', 'phpstorm64.exe')
                if os.path.exists(executable):
                    print(f"T√¨m th·∫•y PhpStorm trong Program Files: {executable}")
                    return executable
    
    # 3. Ki·ªÉm tra trong AppData (cho Toolbox Apps)
    appdata = os.environ.get('LOCALAPPDATA', '')
    if appdata:
        toolbox_paths = [
            os.path.join(appdata, 'JetBrains', 'Toolbox', 'apps', 'PhpStorm', 'ch-0', '*', 'bin', 'phpstorm64.exe'),
            os.path.join(appdata, 'Programs', 'PhpStorm*', 'bin', 'phpstorm64.exe')
        ]
        
        for pattern in toolbox_paths:
            matches = glob.glob(pattern)
            if matches:
                # L·∫•y phi√™n b·∫£n m·ªõi nh·∫•t
                latest = max(matches, key=os.path.getctime)
                print(f"T√¨m th·∫•y PhpStorm trong AppData: {latest}")
                return latest
    
    # 4. Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng PhpStorm
    phpstorm_env = os.environ.get('PHPSTORM_PATH')
    if phpstorm_env and os.path.exists(phpstorm_env):
        print(f"T√¨m th·∫•y PhpStorm t·ª´ bi·∫øn m√¥i tr∆∞·ªùng PHPSTORM_PATH: {phpstorm_env}")
        return phpstorm_env
    
    return None

def parse_phpstorm_url(url):
    """Parse phpstorm:// URL v√† tr√≠ch xu·∫•t file path v√† parameters"""
    try:
        # Parse URL
        parsed = urllib.parse.urlparse(url)
        
        if parsed.scheme != 'phpstorm':
            print(f"‚ö†Ô∏è  URL scheme kh√¥ng h·ª£p l·ªá: {parsed.scheme}")
            return None, {}
        
        # Parse query parameters
        params = urllib.parse.parse_qs(parsed.query)
        
        # L·∫•y file path v√† decode URL encoding
        file_path = params.get('file', [''])[0]
        if file_path:
            file_path = urllib.parse.unquote(file_path)
        
        # L·∫•y c√°c parameters kh√°c
        line = params.get('line', [''])[0]
        column = params.get('column', [''])[0]
        
        result_params = {}
        if line:
            result_params['line'] = line
        if column:
            result_params['column'] = column
            
        return file_path, result_params
        
    except Exception as e:
        print(f"‚ùå L·ªói khi parse URL: {e}")
        return None, {}

def open_in_phpstorm(url):
    # T·ª± ƒë·ªông t√¨m ƒë∆∞·ªùng d·∫´n PhpStorm
    phpstorm_path = find_phpstorm_executable()
    
    if not phpstorm_path:
        print("Kh√¥ng t√¨m th·∫•y phpstorm64.exe!")
        print("H√£y ƒë·∫£m b·∫£o PhpStorm ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ho·∫∑c th√™m v√†o PATH")
        return
    
    # Parse phpstorm:// URL
    file_path, params = parse_phpstorm_url(url)
    
    if not file_path:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y file path t·ª´ URL")
        return
    
    # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
    if not os.path.exists(file_path):
        print(f"‚ö†Ô∏è  File kh√¥ng t·ªìn t·∫°i: {file_path}")
        print("V·∫´n s·∫Ω th·ª≠ m·ªü trong PhpStorm...")
    
    # X√¢y d·ª±ng command v·ªõi arguments
    command_parts = [f'"{phpstorm_path}"']
    
    # Th√™m line number n·∫øu c√≥
    if 'line' in params:
        command_parts.append(f'--line {params["line"]}')
    
    # Th√™m column number n·∫øu c√≥
    if 'column' in params:
        command_parts.append(f'--column {params["column"]}')
    
    # Th√™m file path (lu√¥n cu·ªëi c√πng)
    command_parts.append(f'"{file_path}"')
    
    command = ' '.join(command_parts)
    
    # In th√¥ng tin debug
    print(f"üìÑ File: {file_path}")
    if 'line' in params:
        print(f"üìç Line: {params['line']}")
    if 'column' in params:
        print(f"üìç Column: {params['column']}")
    print(f"üöÄ Command: {command}")
    
    # Th·ª±c thi l·ªánh
    try:
        subprocess.run(command, shell=True)
        print(f"‚úÖ ƒê√£ m·ªü file trong PhpStorm")
    except Exception as e:
        print(f"‚ùå L·ªói khi m·ªü PhpStorm: {e}")

def check_registry_configuration():
    """Ki·ªÉm tra c·∫•u h√¨nh registry hi·ªán t·∫°i"""
    try:
        key = winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, r"phpstorm\shell\open\command")
        current_command, _ = winreg.QueryValueEx(key, "")
        winreg.CloseKey(key)
        print(f"C·∫•u h√¨nh registry hi·ªán t·∫°i: {current_command}")
        return current_command
    except FileNotFoundError:
        print("Kh√¥ng t√¨m th·∫•y registry key cho phpstorm protocol")
        return None
    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc registry: {e}")
        return None

def update_registry_configuration(phpstorm_path):
    """C·∫≠p nh·∫≠t c·∫•u h√¨nh registry v·ªõi ƒë∆∞·ªùng d·∫´n PhpStorm ƒë√∫ng"""
    try:
        # T·∫°o ho·∫∑c m·ªü key
        key = winreg.CreateKey(winreg.HKEY_CLASSES_ROOT, r"phpstorm")
        winreg.SetValueEx(key, "", 0, winreg.REG_SZ, "URL:PhpStorm Protocol")
        winreg.SetValueEx(key, "URL Protocol", 0, winreg.REG_SZ, "")
        winreg.CloseKey(key)
        
        # T·∫°o shell key
        key = winreg.CreateKey(winreg.HKEY_CLASSES_ROOT, r"phpstorm\shell")
        winreg.CloseKey(key)
        
        # T·∫°o open key
        key = winreg.CreateKey(winreg.HKEY_CLASSES_ROOT, r"phpstorm\shell\open")
        winreg.CloseKey(key)
        
        # C·∫≠p nh·∫≠t command key
        key = winreg.CreateKey(winreg.HKEY_CLASSES_ROOT, r"phpstorm\shell\open\command")
        command_value = f'"{phpstorm_path}" "%1"'
        winreg.SetValueEx(key, "", 0, winreg.REG_SZ, command_value)
        winreg.CloseKey(key)
        
        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t registry th√†nh c√¥ng: {command_value}")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t registry: {e}")
        print("H√£y ch·∫°y script v·ªõi quy·ªÅn Administrator")
        return False

def verify_and_update_registry():
    """Ki·ªÉm tra v√† c·∫≠p nh·∫≠t registry n·∫øu c·∫ßn"""
    print("üîç ƒêang ki·ªÉm tra c·∫•u h√¨nh registry...")
    
    # T√¨m PhpStorm
    phpstorm_path = find_phpstorm_executable()
    if not phpstorm_path:
        print("‚ùå Kh√¥ng t√¨m th·∫•y PhpStorm, kh√¥ng th·ªÉ c·∫≠p nh·∫≠t registry")
        return False
    
    # Ki·ªÉm tra registry hi·ªán t·∫°i
    current_command = check_registry_configuration()
    expected_command = f'"{phpstorm_path}" "%1"'
    
    print(f"\nüìã So s√°nh c·∫•u h√¨nh:")
    print(f"Hi·ªán t·∫°i: {current_command}")
    print(f"Mong mu·ªën: {expected_command}")
    
    if current_command == expected_command:
        print("‚úÖ Registry ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng!")
        return True
    else:
        print("\n‚ö†Ô∏è  Registry c·∫ßn ƒë∆∞·ª£c c·∫≠p nh·∫≠t")
        response = input("B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t registry kh√¥ng? (y/N): ")
        if response.lower() in ['y', 'yes']:
            return update_registry_configuration(phpstorm_path)
        else:
            print("B·ªè qua vi·ªác c·∫≠p nh·∫≠t registry")
            return False

def generate_registry_file(mode="python"):
    """T·∫°o file .reg v·ªõi c·∫•u h√¨nh ƒë√∫ng
    
    Args:
        mode (str): "python" ƒë·ªÉ d√πng main.py, "direct" ƒë·ªÉ g·ªçi tr·ª±c ti·∫øp phpstorm64.exe
    """
    phpstorm_path = find_phpstorm_executable()
    if not phpstorm_path:
        print("‚ùå Kh√¥ng t√¨m th·∫•y PhpStorm")
        return
    
    if mode == "python":
        # T√¨m Python executable
        python_path = sys.executable
        script_path = os.path.abspath(__file__)
        
        # Escape backslashes cho file .reg
        escaped_python = python_path.replace('\\', '\\\\')
        escaped_script = script_path.replace('\\', '\\\\')
        
        command_value = f'\\"{escaped_python}\\" \\"{escaped_script}\\" \\"%1\\"'
        file_suffix = "python"
        description = "S·ª≠ d·ª•ng main.py ƒë·ªÉ parse URL v√† g·ªçi PhpStorm"
        
    elif mode == "direct":
        # Escape backslashes cho file .reg
        escaped_path = phpstorm_path.replace('\\', '\\\\')
        command_value = f'\\"{escaped_path}\\" \\"%1\\"'
        file_suffix = "direct"
        description = "G·ªçi tr·ª±c ti·∫øp PhpStorm (PhpStorm t·ª± parse URL)"
    
    else:
        print("‚ùå Mode kh√¥ng h·ª£p l·ªá. Ch·ªçn 'python' ho·∫∑c 'direct'")
        return
    
    reg_content = f'''Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\\phpstorm]
@="URL:PhpStorm Protocol"
"URL Protocol"=""

[HKEY_CLASSES_ROOT\\phpstorm\\shell]

[HKEY_CLASSES_ROOT\\phpstorm\\shell\\open]

[HKEY_CLASSES_ROOT\\phpstorm\\shell\\open\\command]
@="{command_value}"
'''
    
    reg_file_path = os.path.join(os.path.dirname(__file__), f"setupReg-{file_suffix}.reg")
    with open(reg_file_path, 'w', encoding='utf-8') as f:
        f.write(reg_content)
    
    print(f"‚úÖ ƒê√£ t·∫°o file registry: {reg_file_path}")
    print(f"üìù M√¥ t·∫£: {description}")
    print(f"üîß Command: {command_value.replace('\\\\', '\\').replace('\\\"', '\"')}")
    print(f"üìÑ N·ªôi dung file:")
    print(reg_content)

def generate_both_registry_files():
    """T·∫°o c·∫£ 2 lo·∫°i registry file"""
    print("üîß T·∫°o registry file cho Python script:")
    print("=" * 50)
    generate_registry_file("python")
    
    print("\n" + "=" * 50)
    print("üîß T·∫°o registry file cho PhpStorm tr·ª±c ti·∫øp:")
    print("=" * 50)
    generate_registry_file("direct")
    
    print("\n" + "=" * 50)
    print("üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:")
    print("‚Ä¢ setupReg-python.reg: D√πng main.py ƒë·ªÉ parse URL (khuy·∫øn ngh·ªã)")
    print("‚Ä¢ setupReg-direct.reg: G·ªçi tr·ª±c ti·∫øp PhpStorm")
    print("‚Ä¢ Ch·ªâ import 1 trong 2 file v√†o Registry")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "--check-registry":
            verify_and_update_registry()
        elif command == "--generate-reg":
            generate_both_registry_files()
        elif command == "--generate-python":
            generate_registry_file("python")
        elif command == "--generate-direct":
            generate_registry_file("direct")
        elif command.startswith("phpstorm://"):
            open_in_phpstorm(command)
        else:
            # Assume it's a URL
            open_in_phpstorm(command)
    else:
        print("üìñ C√°ch s·ª≠ d·ª•ng:")
        print("  python main.py 'phpstorm://open?file=...'  - M·ªü URL trong PhpStorm")
        print("  python main.py --check-registry           - Ki·ªÉm tra v√† c·∫≠p nh·∫≠t registry")
        print("  python main.py --generate-reg             - T·∫°o c·∫£ 2 lo·∫°i file .reg")
        print("  python main.py --generate-python          - T·∫°o file .reg cho Python script")
        print("  python main.py --generate-direct          - T·∫°o file .reg cho PhpStorm tr·ª±c ti·∫øp")